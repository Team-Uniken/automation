apply plugin: "com.android.application"

project.ext.envConfigFiles = [ nwd: ".env.nwd", sandp: ".env.sandp", stock:".env.stock", ubs:".env.ubs",cbc:".env.cbc",cbcverify:".env.cbcverify",relidmobile:".env.relidmobile"]
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"


/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"]
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.2"

    defaultConfig{

        minSdkVersion 16
        targetSdkVersion 27
        versionCode 520
        versionName "5.2.0"

        packagingOptions {
            exclude '/lib/mips64/**'
            exclude '/lib/arm64-v8a/**'
            exclude '/lib/x86_64/**'
        }

        ndk {
            abiFilters 'x86','armeabi', 'armeabi-v7a', 'mips'
        }

        multiDexEnabled true
        resValue "string", "build_config_package", "com.reactrefapp"
        proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        resValue "string", "ANALYSIS_AUTHORITY", "${applicationId}.analysis.shield.provider"
    }

//    splits {
//        abi {
//            reset()
//            enable enableSeparateBuildPerCPUArchitecture
//            universalApk false  // If true, also generate a universal APK
//            include "armeabi-v7a", "x86"
//        }
//    }

    signingConfigs {
        releaseNwd {
            storeFile file("reactandroid.jks")
            storePassword "uniken123\$"
            keyAlias "uniken"
            keyPassword "uniken123\$"
      }
        releaseSandP {
            storeFile file("reactandroid.jks")
            storePassword "uniken123\$"
            keyAlias "uniken"
            keyPassword "uniken123\$"
        }
        releaseStock {
            storeFile file("reactandroid.jks")
            storePassword "uniken123\$"
            keyAlias "uniken"
            keyPassword "uniken123\$"
        }
        releaseUbs {
            storeFile file("reactandroid.jks")
            storePassword "uniken123\$"
            keyAlias "uniken"
            keyPassword "uniken123\$"
        }
        releaseCbc {
            storeFile file("reactandroid.jks")
            storePassword "uniken123\$"
            keyAlias "uniken"
            keyPassword "uniken123\$"
        }
        releaseCbcverify {
            storeFile file("reactandroid.jks")
            storePassword "uniken123\$"
            keyAlias "uniken"
            keyPassword "uniken123\$"
        }
        releaseRelidmobile {
            storeFile file("reactandroid.jks")
            storePassword "uniken123\$"
            keyAlias "uniken"
            keyPassword "uniken123\$"
        }
    }

    flavorDimensions "default"

    productFlavors{
        sandp{
            applicationId 'com.uniken.sandp'
            signingConfig signingConfigs.releaseSandP
        }
        nwd{
            applicationId 'com.uniken.nwd'
            signingConfig signingConfigs.releaseNwd
        }
        stock{
            applicationId 'com.uniken.stock'
            signingConfig signingConfigs.releaseStock
        }
        ubs{
            applicationId 'com.uniken.ubs'
            signingConfig signingConfigs.releaseUbs
        }
        cbc{
            applicationId 'com.uniken.cbc'
            signingConfig signingConfigs.releaseCbc
        }
        cbcverify{
            applicationId 'com.uniken.cbc.verify'
            signingConfig signingConfigs.releaseCbcverify
        }
        relidmobile{
            applicationId 'com.uniken.relidmobile'
            signingConfig signingConfigs.releaseRelidmobile
        }
    }

    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
//            def abi = output.getFilter(OutputFile.ABI)
//            if (abi != null) {  // null for the universal-debug, universal-release variants
//                output.versionCodeOverride =
//                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
//            }
//        }
//    }
}

dependencies {
    compile (project(':react-native-fcm')){
        exclude group: "com.google.android.gms"
        exclude group: "com.google.firebase"
    }
    compile project(':react-native-touch-id-android')
    compile project(':react-native-spinkit')
    compile project(':react-native-fs')
    compile (project(':react-native-maps')){
        exclude group: 'com.google.android.gms', module: 'play-services-base'
    }
    compile project(':react-native-config')
    compile project(':react-native-camera')
    //compile fileTree(include: ['*.jar'], dir: 'libs')
    // From node_modules
    compile project(':react-native-fbsdk')
    compile(name: 'app-sdk-release-v1.7.2-key-size-changed', ext: 'aar')
    compile(name: 'android-patternview-release', ext: 'aar')
    //compile project(':ExtraDimensions')
  //  compile project(':react-native-push-notification')
//    compile('com.google.android.gms:play-services-gcm:11.8.0') {
//        force = true;
//    }
    // <- Add this line
    compile('com.android.support:appcompat-v7:27.0.2') {
        force = true;
    }
    compile 'com.facebook.react:react-native:+'
    //compile 'com.google.android.gms:play-services-gcm:9.2.1'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.android.support:multidex:1.0.2'

    compile ('com.better.workspace.lib:agent:4.3.86'){
        exclude group: "com.google.android.gms"
    }

    compile ("com.google.android.gms:play-services-base:11.8.0") {
        force = true;
    }
    compile ("com.google.android.gms:play-services-maps:11.8.0") {
        force = true;
    }
    compile ('com.google.firebase:firebase-core:11.8.0'){
        force = true
    } //this decides your firebase SDK version
    compile ('com.google.firebase:firebase-messaging:11.8.0'){
        force=true
    }
    //compile 'com.facebook.stetho:stetho:1.3.1'
   // compile 'com.facebook.stetho:stetho-okhttp3:1.3.1'
   //  compile 'com.android.support:appcompat-v7:26.0.2'
   // compile "com.better.workspace.lib:agent:4.3.61"
}

configurations.all {
    resolutionStrategy {
        //force 'com.google.android.gms:play-services-gcm:9.2.1'
       // force 'com.android.support:support-v4:24.2.1'
        //force 'com.android.support:design:24.4.0'
       // force 'com.android.support:appcompat-v7:26.1.0'
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'


